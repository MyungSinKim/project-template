buildscript {
    repositories { mavenCentral() }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath('com.bmuschko:gradle-docker-plugin:3.0.8')
    }
}

apply plugin: 'org.springframework.boot'
apply plugin: 'com.bmuschko.docker-remote-api'

archivesBaseName = "template-server"

repositories {
    mavenCentral()
    maven { url "https://oss.sonatype.org/content/groups/public" }
}

dependencies {
    compile('de.codecentric:spring-boot-admin-starter-client:1.5.4')
    compile('org.springframework.boot:spring-boot-devtools')
    compile('org.springframework.cloud:spring-cloud-starter-config')
    compile('org.springframework.boot:spring-boot-starter-actuator')
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile('org.springframework.boot:spring-boot-starter-security')
    compile('org.springframework.kafka:spring-kafka')

    compile('com.github.rozidan:levelog-spring-boot:1.0.0-SNAPSHOT')
    compile('com.github.rozidan:modelmapper-spring-boot-starter:1.0.0')
    compile('com.github.rozidan:logger-spring-boot:1.0.0-SNAPSHOT')

    compile('io.springfox:springfox-swagger2:2.7.0')
    compile('org.flywaydb:flyway-core')

    compile project(':template-client')

    compileOnly('org.projectlombok:lombok')

    runtime('com.h2database:h2')
    runtime('org.mariadb.jdbc:mariadb-java-client')

    testCompile('org.springframework.boot:spring-boot-starter-test')
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

if (!project.hasProperty('devtoolsEnabled')) {
    project.ext.devtoolsEnabled = true
}

if (!project.hasProperty('dockerUrl')) {
    project.ext.dockerUrl = 'dockerUrlValue'
}

bootRepackage.excludeDevtools = !devtoolsEnabled

import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.Dockerfile

docker { url = dockerUrl }

task createDockerfile(type: Dockerfile) {
    group = 'docker'
    description = 'Creates a Dockerfile based on the provided instructions.'
    from 'openjdk:8-jre-alpine'
    runCommand 'apk update curl && apk add curl'
    maintainer 'maintainer'
    volume("/tmp")
    environmentVariable('PROFILE', '""')
    addFile('"' + jar.archiveName.toString() + '"', '"app.jar"')
    Integer[] ports = [8080]
    if (devtoolsEnabled) {
        ports += 8000
    }
    exposePort(ports)
    String[] entries = [
            'java',
            '-Djava.security.egd=file:/dev/./urandom'
    ]
    if (devtoolsEnabled) {
        entries += [
                '-Xdebug',
                "-Xrunjdwp:server=y,transport=dt_socket,suspend=n,address=8000"
        ]
    }
    entries += ['-jar', '/app.jar']
    entryPoint(entries)
    defaultCommand('--spring.profiles.active=${PROFILE}')
    doFirst {
        copy {
            from jar
            into "build/docker"
        }
    }
}

task buildImage(type: DockerBuildImage) {
    group = 'docker'
    description = 'Builds an image from a Dockerfile.'
    pull true
    inputDir = createDockerfile.destFile.parentFile
    tag = 'template' + ': ' + version
}